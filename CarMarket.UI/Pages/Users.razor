@page "/admin/users"
@using CarMarket.UI.Pages
@using CarMarket.Core.User.Domain
@using CarMarket.UI.Data
@using CarMarket.UI.Services.User
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize(Roles = "Admin")]

<AuthorizeView Context="auth" Roles = "Admin">
<Authorized>

<h1>Users Controller</h1>

<button class="btn btn-success" @onclick="AddUser">Add User</button>

<p>All users</p>

     <GridView ItemType="user" ApiGetDataLink="https://localhost:10001/api/User/GetUsersByPage">
         <GridColumns>
            <GridColumn ColumnTitle="Id"></GridColumn>
            <GridColumn ColumnTitle="FirstName"></GridColumn>
            <GridColumn ColumnTitle="LastName"></GridColumn>
            <GridColumn ColumnTitle="Email"></GridColumn>
            <GridColumn ColumnTitle="Role"></GridColumn>
            <GridColumn ColumnTitle="Encrypted Password"></GridColumn>
        </GridColumns>

        <GridRow Context="user">
                    <td>@user.Id</td>
                    <td>@user.FirstName</td>
                    <td>@user.LastName</td>
                    <td>@user.Email</td>
                    <td>@user.PasswordHash</td>
        </GridRow>
    </GridView>

@if (ShowPopup)
{
    <!-- This is the popup to create or edit a user -->
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">@TitleContext</h3>
                    <!-- Button to close the popup -->
                    <button type="button" class="close"
                            @onclick="ClosePopup">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <!-- Edit form for the current user -->
                <div class="modal-body">
                        <input class="form-control" type="text"
                                placeholder="Firstname"
                                @bind="editedUser.FirstName" />
                    <input class="form-control" type="text"
                            placeholder="Lastname"
                            @bind="editedUser.LastName" />
                    <input class="form-control" type="email"
                            placeholder="Email"
                            @bind="editedUser.Email" />
                            <input class="form-control" type="password"
                            placeholder="Password"
                            @bind="editedUser.PasswordHash" />

                    <select class="form-control"
                            @bind="@CurrentUserRole">
                        @foreach (var option in Options)
                        {
                            <option value="@option">
                                @option
                            </option>
                        }
                    </select>
                    <br /><br />
                   
                    @if (string.IsNullOrWhiteSpace(editedUser.Id))
                    {
                            <button class="btn btn-primary"
                            @onclick="CreateUser">
                                Save
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-secondary"
                            @onclick="() => UpdateUser()">
                                Update
                            </button>
                        }
                    <br />
                    <span style="color:red">@strError</span>
                </div>
            </div>
        </div>
    </div>
}
</Authorized>
</AuthorizeView>

<BreadCrumb BreadCrumbData="BreadCrumbDatas"></BreadCrumb>

@code {
    [Inject]
    public IHttpUserService UserService { get; set; }

    private List<BreadCrumbData> BreadCrumbDatas { get; set; }

    private List<UserModel> users;
    private UserModel user;
    private UserModel newUser = new UserModel();

    UserModel editedUser = new();
    string CurrentUserRole { get; set; } = "User";
    List<string> Options = new() { "User", "Admin" };
    string strError = "";
    bool ShowPopup = false;
    string TitleContext { get; set; }

    protected override async Task OnInitializedAsync()
    {
        BreadCrumbDatas = new List<BreadCrumbData>();

        BreadCrumbDatas.Add(new BreadCrumbData()
        {
            Text = "Users",
            Url = "/admin/users"
        });
    }

    private void AddUser()
    {
        editedUser = new()
        {
            Id = null
        };

        TitleContext = "Add new user";
        ShowPopup = true;
    }

    private async Task CreateUser()
    {
        strError = string.Empty;

        if (string.IsNullOrWhiteSpace(editedUser.FirstName)) strError += "Enter user firstname";
        if (string.IsNullOrWhiteSpace(editedUser.LastName)) strError += "Enter user lastname";
        if (string.IsNullOrWhiteSpace(editedUser.Email)) strError += "Enter user email";
        if (string.IsNullOrWhiteSpace(editedUser.PasswordHash)) strError += "Enter user password";

        if (string.IsNullOrWhiteSpace(strError))
        {
            ShowPopup = false;

            await UserService.CreateAsync(editedUser);
        }
    }
    
    private void EditUser(UserModel updatedUser)
    {
        TitleContext = "Edit user";

        editedUser = updatedUser;

        ShowPopup = true;
    }

    private async Task UpdateUser()
    {
        if (string.IsNullOrWhiteSpace(strError))
        {
            ShowPopup = false;

            await UserService.UpdateAsync(editedUser.Id, editedUser);
        }
    }

    private async Task DeleteCar(UserModel user)
    {
        ShowPopup = false;

        await UserService.DeleteAsync(user.Id);
    }

    private void ClosePopup()
    {
        ShowPopup = false;
    }
}
