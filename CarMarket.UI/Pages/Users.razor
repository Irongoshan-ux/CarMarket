@page "/admin/users"
@using CarMarket.UI.Pages
@using CarMarket.Core.User.Domain
@using CarMarket.UI.Services.HttpInterceptor
@using CarMarket.UI.Services.User
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@inject NavigationManager Navigation
@inject IToastService toastService

@attribute [Authorize(Roles = "Admin")]

<AuthorizeView Context="auth" Roles = "Admin">
<Authorized>
<h1>Users Controller</h1>

<div>

<button style="float:left;" class="btn btn-success" @onclick="AddUser">Add User</button>

<button style="margin-left:10px;" type="button" class="btn btn-outline-primary" @onclick="SearchUsers">Search</button>

</div>
<br />
<br />

<p>All users</p>

     <GridView ItemType="user" ApiGetDataLink="https://localhost:10001/api/User/GetUsersByPage" ReloadList="DataUpdated">
         <GridColumns>
            <GridColumn ColumnTitle="Id"></GridColumn>
            <GridColumn ColumnTitle="Username"></GridColumn>
            <GridColumn ColumnTitle="FirstName"></GridColumn>
            <GridColumn ColumnTitle="LastName"></GridColumn>
            <GridColumn ColumnTitle="Email"></GridColumn>
            <GridColumn ColumnTitle="Phone number"></GridColumn>
            <GridColumn ColumnTitle="Role"></GridColumn>
            <GridColumn ColumnTitle="Actions" ></GridColumn>
        </GridColumns>

        <GridRow Context="user">
                    @if (user.Id.Length > 20) 
                    {
                        <td>@(user.Id.Remove(20) + "...")</td>
                    }
                    else
                    {
                        <td>@user.Id</td>
                    }
                    <td>@user.UserName</td>
                    <td>@user.FirstName</td>
                    <td>@user.LastName</td>
                    <td>@user.Email</td>
                    <td>@user.PhoneNumber</td>
                    <td>@user.Role.Name</td>
                    <td>
                    <button class="btn btn-primary"
                        @onclick="() => EditUser(user)">
                         <span
                            class="glyphicon glyphicon-pencil"></span>
                            &nbsp; Edit
                    </button>
                @if (!user.Email.Equals(auth.User.Identity.Name))
                {
                     <span>&nbsp;|&nbsp;</span>
                    <button class="btn btn-danger"
                        @onclick="(() => DeleteUser(user))">
                        <span
                            class="glyphicon glyphicon-trash"></span>
                            &nbsp; Remove
                    </button>
                    }
                    </td>
        </GridRow>
    </GridView>

@if (ShowPopup)
{
    <!-- This is the popup to create or edit a user -->
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">@TitleContext</h3>
                    <!-- Button to close the popup -->
                    <button type="button" class="close"
                            @onclick="ClosePopup">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <!-- Edit form for the current user -->
                <div class="modal-body">
                    <MudTextField @bind-Value="editedUser.FirstName" Required=true Label="Firstname" RequiredError="User name is required!" Variant="Variant.Text" AutoFocus=true Validation="@(new Func<string,string>(ValidateUserFirstName))"></MudTextField>

                        <MudTextField @bind-Value="@editedUser.LastName" Required=true RequiredError="User lastname is required!" Label="Lastname" Variant="Variant.Text" Validation="@(new Func<string,string>(ValidateUserLastName))"></MudTextField>

                        <MudTextField @bind-Value="@editedUser.Email" Required=true RequiredError="Email is required!" Label="Email" Variant="Variant.Text" Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})"></MudTextField>

                         <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @bind-Value="@editedUser.PasswordHash"
                                  InputType="InputType.Password"
                                  Required="true"
                                  RequiredError="Password is required!"/>

                            <MudSelect Variant="Variant.Text"  T="string" @bind-Value="CurrentUserRole" Label="User role" AnchorOrigin="Origin.BottomCenter" Validation="@(new Func<string,string>(ValidateUserRole))">
                                @foreach (var role in UserRoles)
                                {
                                    <MudSelectItem Value="@role" />
                                }
                            </MudSelect>
                            <br>
                        
                    <br />
                   
                     @if (string.IsNullOrWhiteSpace(editedUser.Id))
                        {
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" @onclick="() => CreateUser()">Save</MudButton>
                        }
                        else
                        {
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" @onclick="() => UpdateUser()">Update</MudButton>
                        }
                </div>
            </div>
        </div>
    </div>
}
</Authorized>
</AuthorizeView>

@code {
    [Inject]
    public IHttpUserService UserService { get; set; }

    [Inject]
    public HttpInterceptorService Interceptor { get; set; }

    public void Dispose() => Interceptor.DisposeEvent();

    public bool DataUpdated { get; set; } = false;

    private UserModel user;
    private UserModel newUser = new UserModel();

    UserModel editedUser = new();
    static List<string> UserRoles = GetUserRolesSelection();
    string CurrentUserRole { get; set; } = UserRoles.FirstOrDefault();
    string strError = "";
    bool ShowPopup = false;
    string TitleContext { get; set; }

    string firstNameError = "Enter user firstname";
    string lastNameError = "Enter user lastname";
    string emailError = "Enter user email";
    string userRoleError = "Choose a user role";

    protected override void OnInitialized()
    {
    }

    private void SearchUsers()
    {
        Navigation.NavigateTo("/admin/users/search");
    }

    private void AddUser()
    {
        editedUser = new()
        {
            Id = null,
            Role = new()
        };

        TitleContext = "Add new user";
        ShowPopup = true;
    }

    private string ValidateUserFirstName(string firstName){
        if (string.IsNullOrWhiteSpace(firstName))
            return firstNameError;

        else return null;
    }

    private string ValidateUserLastName(string lastName){
        if (string.IsNullOrWhiteSpace(lastName))
            return lastNameError;

        else return null;
    }

    private string ValidateUserEmail(string email){
        if (string.IsNullOrWhiteSpace(email))
            return emailError;

        else return null;
    }

    private async Task CreateUser()
    {
        strError = string.Empty;

        if(!SetUserRole(CurrentUserRole)) return;
        if (string.IsNullOrWhiteSpace(editedUser.FirstName)) strError += "\nEnter user firstname";
        if (string.IsNullOrWhiteSpace(editedUser.LastName)) strError += "\nEnter user lastname";
        if (string.IsNullOrWhiteSpace(editedUser.Email)) strError += "\nEnter user email";
        if (string.IsNullOrWhiteSpace(editedUser.PasswordHash)) strError += "\nEnter user password";

        if (string.IsNullOrWhiteSpace(strError))
        {
            ShowPopup = false;

            var createdUser = await UserService.CreateAsync(editedUser);

            if (createdUser != null && createdUser?.Email is not null) toastService.ShowSuccess($"{createdUser.Email} was successfully created!");
            else toastService.ShowError($"Error with creating a new user");

            DataUpdated = true;
        }
    }

    private void EditUser(UserModel updatedUser)
    {
        editedUser = new()
        {
            Id = null,
            Role = new()
        };

        TitleContext = "Edit user";

        editedUser = updatedUser;

        CurrentUserRole = editedUser.Role.Name;

        ShowPopup = true;
    }

    private async Task UpdateUser()
    {
        strError = string.Empty;

        if(!SetUserRole(CurrentUserRole)) return;
        if (string.IsNullOrWhiteSpace(strError))
        {
            ShowPopup = false;

            if (await UserService.UpdateAsync(editedUser.Id, editedUser))
            {
                toastService.ShowSuccess($"{editedUser.Email} was successfully updated!");

                DataUpdated = true;
            }
            else toastService.ShowError($"Error with updating {editedUser.Email}");
        }
    }

    private async Task DeleteUser(UserModel user)
    {
        ShowPopup = false;

        if (await UserService.DeleteAsync(user.Id))
        {
            toastService.ShowSuccess($"{user.Email} was successfully deleted!");

            DataUpdated = true;
        }
        else toastService.ShowError($"Error with deleting {user.Email}");
    }

    private void ClosePopup()
    {
        strError = string.Empty;
        ShowPopup = false;
    }

    private static List<string> GetUserRolesSelection()
    {
        var names = string.Join(",", Enum.GetNames(typeof(UserRole)));

        var userRoles = new List<string>()
        {
            "Select user role",
        };

        userRoles.AddRange(names.Split(',').ToList());

        return userRoles;
    }

    private string ValidateUserRole(string userRole)
    {
        if (!SetUserRole(userRole))
            return userRoleError;

        else return null;
    }

    private bool SetUserRole(string userRoleName)
    {
        if (!Enum.TryParse(typeof(UserRole), userRoleName, out object result))
        {
            strError += "\nSelect user role";
            return false;
        }

        editedUser.Role = new()
        {
            Name = ((UserRole)result).ToString()
        };

        return true;
    }
}
