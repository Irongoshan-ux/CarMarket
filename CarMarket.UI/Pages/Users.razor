@page "/admin/users"
@using CarMarket.Core.User.Domain
@using Microsoft.AspNetCore.Authorization
@inject HttpClient Http

@attribute [Authorize(Roles = "Admin")]

<AuthorizeView Context="auth" Roles = "Admin">
<Authorized>

<h1>Users Controller</h1>

<div class="col-12">
    <h3><b>Add User</b></h3>
    <hr />

<EditForm Model="@newUser" OnValidSubmit="@(() => AddUserAsync(auth))">
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">first name :</label>
            <InputText class="form-control col-3" @bind-Value="newUser.FirstName" placeholder="first name" />
            <ValidationMessage For="@(() => newUser.FirstName)" />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">last name :</label>
            <InputText class="form-control col-3" @bind-Value="newUser.LastName" placeholder="last name" />
            <ValidationMessage For="@(() => newUser.LastName)" />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">email address :</label>
            <InputText class="form-control col-3" @bind-Value="newUser.Email" placeholder="email address" />
            <ValidationMessage For="@(() => newUser.Email)" />
        </div>
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">password :</label>
            <InputText class="form-control col-3" @bind-Value="newUser.PasswordHash" placeholder="password" />
            <ValidationMessage For="@(() => newUser.PasswordHash)" />
        </div>
        <br />
        <div class="col-12 row">
            <span class="col-2"></span>
            <input type="submit" class="form-control col-1 btn btn-primary" value="Save" />
        </div>
    </EditForm>
</div>
<br />

<p>All users</p>

@if (users == null)
{
    <p><em>Loading users...</em></p>
}
else
{
     <GridView ItemType="user" ApiGetDataLink="https://localhost:10001/api/User/GetUsersByPage">
         <GridColumns>
            <GridColumn ColumnTitle="Id"></GridColumn>
            <GridColumn ColumnTitle="FirstName"></GridColumn>
            <GridColumn ColumnTitle="LastName"></GridColumn>
            <GridColumn ColumnTitle="Email"></GridColumn>
            @*<GridColumn ColumnTitle="Role"></GridColumn>*@
            <GridColumn ColumnTitle="Encrypted Password"></GridColumn>
        </GridColumns>

        <GridRow Context="user">
                    <td>@user.Id</td>
                    <td>@user.FirstName</td>
                    <td>@user.LastName</td>
                    <td>@user.Email</td>
                    @*<td>@user.Role?.RoleName</td>*@
                    <td>@user.PasswordHash</td>
        </GridRow>
    </GridView>
}

@if (ShowPopup)
{
    <!-- This is the popup to create or edit a user -->
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">@TitleContext</h3>
                    <!-- Button to close the popup -->
                    <button type="button" class="close"
                            @onclick="ClosePopup">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <!-- Edit form for the current user -->
                <div class="modal-body">
                    <!-- Only show Id if not a new user -->
                    @if (objUser.Id != "")
                    {
                        <p>@objUser.Id</p>
                        <p>@objUser.UserName</p>
                    }
                    else
                    {
                        <input class="form-control" type="text"
                                placeholder="UserName"
                                @bind="objUser.UserName" />
                    }
                    <input class="form-control" type="text"
                            placeholder="Email"
                            @bind="objUser.Email" />
                    <input class="form-control" type="password"
                            placeholder="Password"
                            @bind="objUser.PasswordHash" />
                    <select class="form-control"
                            @bind="@CurrentUserRole">
                        @foreach (var option in Options)
                        {
                            <option value="@option">
                                @option
                            </option>
                        }
                    </select>
                    <br /><br />
                    <!-- Button to save the user -->
                    <button class="btn btn-primary"
                            @onclick="SaveUser">
                        Save
                    </button>
                    <!-- Only show delete button if not a new record -->
                    @if (objUser.Id != "")
                    {
                        <!-- Button to delete the forecast -->
                        <button class="btn btn-danger"
                                @onclick="DeleteUser">
                            Delete
                        </button>
                    }
                    <br />
                    <span style="color:red">@strError</span>
                </div>
            </div>
        </div>
    </div>
}
<button class="btn btn-success" @onclick="AddNewUser">Add User</button>
</Authorized>
</AuthorizeView>

@code {

    private List<UserModel> users;
    private UserModel user;
    private UserModel newUser = new UserModel();

    // Property used to add or edit the currently selected user
    UserModel objUser = new();
    // Tracks the selected role for the currently selected user
    string CurrentUserRole { get; set; } = "User";
    // Collection to display the existing users
    List<UserModel> ColUsers = new();
    // Options to display in the roles dropdown when editing a user
    List<string> Options = new() { "User", "Admin" };
    // To hold any possible errors
    string strError = "";
    // To enable showing the Popup
    bool ShowPopup = false;
    string TitleContext { get; set; }

    //private List<Permission> newUserPermissions; TODO: How to get list of permissions and select there?

    private async Task AddUserAsync(AuthenticationState context)
    {
        await Http.PostAsJsonAsync("https://localhost:10001/api/User/CreateUser", newUser);
        await GetUserModelList();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetUserModelList();
    }

    private async Task GetUserModelList()
    {
        users = await Http.GetFromJsonAsync<List<UserModel>>("https://localhost:10001/api/User/GetUsers");
    }

     void AddNewUser()
    {
        TitleContext = "Add new user";
        // Make new user
        objUser = new UserModel();
        objUser.PasswordHash = "*****";
        // Set Id to blank so we know it is a new record
        objUser.Id = "";
        // Open the Popup
        ShowPopup = true;
    }

    async Task SaveUser()
    {
        ShowPopup = false;
    }
    async Task EditUser(UserModel userModel)
    {
        TitleContext = "Edit user";
    }
    async Task DeleteUser()
    {
        // Close the Popup
        ShowPopup = false;
        // Get the user to delete
    }
    void ClosePopup()
    {
        ShowPopup = false;
    }
}
