@page "/cars"
@using BlazorInputFile
@using CarMarket.BusinessLogic.Image.Service
@using CarMarket.Core.Car.Domain
@using CarMarket.Core.Image.Domain
@using System.IO
@using CarMarket.Core.User.Domain
@using CarMarket.UI.Data
@using CarMarket.UI.Services.Car
@using CarMarket.UI.Services.Image
@inject NavigationManager Navigation

<h1>Cars Controller</h1>

<AuthorizeView Roles="Admin,User">
<button class="btn btn-success" @onclick="AddCar">Add Car</button>
</AuthorizeView>

<button class="btn-outline-primary" @onclick="SearchCars">Search</button>

<p>All cars</p>
    <GridView ItemType="car" ApiGetDataLink="https://localhost:10001/api/Car/GetCarsByPage" ReloadList="DataUpdated.IsDataUpdated">
            <GridColumns>
                <GridColumn ColumnTitle="Image"></GridColumn>
                <GridColumn ColumnTitle="Id"></GridColumn>
                <GridColumn ColumnTitle="Title"></GridColumn>
                <GridColumn ColumnTitle="Car type"></GridColumn>
                <GridColumn ColumnTitle="Description"></GridColumn>
                <GridColumn ColumnTitle="Owner"></GridColumn>
                <GridColumn ColumnTitle="Price"></GridColumn>
                <AuthorizeView>
                    <Authorized>
                        <GridColumn ColumnTitle="Actions"></GridColumn>
                    </Authorized>
                </AuthorizeView>
            </GridColumns>

        <GridRow Context="car">
            <td>
                <NavLink href=@string.Format("/cars/cardetail/{0}", car.Id)>
                @if (car.CarImages.Count > 0)
                {
                    <img src="@ImageService.ConvertImageToDisplay(car.CarImages.FirstOrDefault())" height ="150px" />
                }
                else
                {
                    <img src="https://thumbs.dreamstime.com/z/no-image-available-icon-flat-vector-no-image-available-icon-flat-vector-illustration-132482953.jpg" height="150px" />
                }
                </NavLink>
            </td>
            <td>@car.Id</td>
            <td>@car.Name</td>
            <td>@car.CarType</td>
            <td>@car.Description</td>
            <td>@car.Owner.Email</td>
            <td>@car.Price</td>
            <AuthorizeView>
                <Authorized>
                    @if (car.Owner.Email.Equals(context.User.Identity.Name) || context.User.IsInRole("Admin"))
                    {
                        <button class="btn btn-primary"
                            @onclick="() => EditCar(car)">
                            Edit
                        </button>

                        <button class="btn btn-danger"
                            @onclick="(() => DeleteCar(car))">
                            Delete
                        </button>
                    }
                </Authorized>
            </AuthorizeView>
        </GridRow>
    </GridView>
<AuthorizeView>
    <Authorized>
        <CarPopUp CarService="CarService" TitleContext="@TitleContext" context="context"
            ShowPopup="ShowPopup" EditedCar="editedCar" CurrentCarType="@CurrentCarType"></CarPopUp>
    </Authorized>
</AuthorizeView>

<BreadCrumb BreadCrumbData="BreadCrumbData"></BreadCrumb>
@code {
    [Inject]
    public IHttpCarService CarService { get; set; }

    public string TitleContext { get; set; }

    public BreadCrumbData BreadCrumbData = new()
    {
        Text = "Cars",
        Url = "/cars"
    };

    private CarModel car;
    private CarModel editedCar = new();
    private static List<string> Options = GetCarTypesSelection();
    private string strError = "";
    private bool ShowPopup = false;
    private string CurrentCarType = Options.FirstOrDefault();
    
    private void SearchCars()
    {
        Navigation.NavigateTo("/cars/search");
    }

    private void AddCar()
    {
        editedCar = new()
        {
            Owner = new(),
            CarImages = new List<ImageModel>()
        };

        TitleContext = "Add new car";
        ShowPopup = true;
    }

    private void EditCar(CarModel updatedCar)
    {
        TitleContext = "Edit car";

        editedCar = updatedCar;

        CurrentCarType = editedCar.CarType.ToString();

        ShowPopup = true;
    }

    private async Task DeleteCar(CarModel car)
    {
        await CarService.DeleteAsync(car.Id);

        DataUpdated.IsDataUpdated = true;
    }

    private static List<string> GetCarTypesSelection()
    {
        var names = string.Join(",", Enum.GetNames(typeof(CarType)));

        var carTypes = new List<string>()
        {
            "Select car type",
        };

        carTypes.AddRange(names.Split(',').ToList());

        return carTypes;
    }
}