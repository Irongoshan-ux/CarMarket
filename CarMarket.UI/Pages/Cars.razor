@page "/cars"
@using BlazorInputFile
@using CarMarket.BusinessLogic.Image.Service
@using CarMarket.Core.Car.Domain
@inject HttpClient Http
@using CarMarket.Core.Image.Domain
@using System.IO

<h1>Cars Controller</h1>

<p>Add car</p>

    <BlazorInputFile.InputFile OnChange="HandleFilesSelected"></BlazorInputFile.InputFile>
    <br>
    <BlazorInputFile.InputFile OnChange="HandleFilesSelected"></BlazorInputFile.InputFile>
    <br>
    <BlazorInputFile.InputFile OnChange="HandleFilesSelected"></BlazorInputFile.InputFile>
    <br>

    <input @bind="newCarName" placeholder="Enter car name" />
    <input @bind="newCarDescription" placeholder="Enter description" />
    <input @bind="newCarPrice" placeholder="Enter price" />
    <input @bind="newCarType" placeholder="Enter car type name" />

    <button @onclick="AddCarAsync">Add car</button>

<p>Delete car</p>

<input @bind="deleteCarId" placeholder="Enter the Id of the car you want to delete" />
<button @onclick="DeleteCarAsync">Delete</button>

<p>All cars</p>

@if (cars == null)
{
    <p><em>Loading cars...</em></p>
}
else
{
    <GridView Items="cars">
        <GridColumns>
            <GridColumn ColumnTitle="Image"></GridColumn>
            <GridColumn ColumnTitle="Id"></GridColumn>
            <GridColumn ColumnTitle="Title"></GridColumn>
            <GridColumn ColumnTitle="Car type"></GridColumn>
            <GridColumn ColumnTitle="Description"></GridColumn>
            <GridColumn ColumnTitle="Price"></GridColumn>
            <AuthorizeView>@* Roles="Admin" Policy="Admin">*@
                <Authorized>
                    <GridColumn ColumnTitle="Actions"></GridColumn>
                </Authorized>
            </AuthorizeView>
        </GridColumns>

        <GridRow Context="car">
            <td>
                <NavLink href=@string.Format("/cars/cardetail/{0}", car.Id)>
                    <img src="@ImageService.ConvertImageToDisplay(car.CarImages.FirstOrDefault())" width="200px"/>
                </NavLink>
            </td>
            <td>@car.Id</td>
            <td>@car.Name</td>
            <td>@car.CarType</td>
            <td>@car.Description</td>
            <td>@car.Price</td>
            <AuthorizeView>@* Roles="Admin" Policy="Admin">*@
                <Authorized>
                    <th>
                        <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => EditCar(car))">Edit</a> |
                        <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => DeleteCar(car))">Delete</a>
                    </th>
                </Authorized>
            </AuthorizeView>
        </GridRow>
    </GridView>
}

@code {
    private List<CarModel> cars;
    private CarModel car;
    private string newCarName;
    private string newCarDescription;
    private int newCarPrice;
    private CarType newCarType;
    private long deleteCarId;
    
    private List<ImageModel> newCarImages = new List<ImageModel>();

    private void EditCar(CarModel editedCar)
    {
        car = editedCar;
    }

    private async Task DeleteCar(CarModel deletedCar)
    {
        await Http.DeleteAsync("https://localhost:10001/api/Car/DeleteCar/" + deletedCar.Id);

        await GetCarModelList();
    }

    async Task HandleFilesSelected(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();

        if ((file != null) && (ImageService.IsImage(file.Name)))
        {
            var ms = new MemoryStream();
            await file.Data.CopyToAsync(ms);

            newCarImages.Add(new ImageModel
            {
                ImageData = ms.ToArray(),
                ImageTitle = file.Name
            });
        }
        else throw new ArgumentException("File type " + file.Type + " not supported.");
    }

    private async Task AddCarAsync()
    {
        var newCar = new CarModel
        {
            Name = newCarName,
            Description = newCarDescription,
            CarImages = newCarImages,
            Price = newCarPrice,
            CarType = newCarType
        };

        await Http.PostAsJsonAsync("https://localhost:10001/api/Car/CreateCar", newCar);
        await GetCarModelList();
    }

    private async Task DeleteCarAsync()
    {
        await Http.PostAsJsonAsync<long>("https://localhost:10001/api/Car/DeleteCar/" + deleteCarId, deleteCarId);
        await GetCarModelList();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetCarModelList();
    }

    private async Task GetCarModelList()
    {
        cars = await Http.GetFromJsonAsync<List<CarModel>>("https://localhost:10001/api/Car/GetCars");
    }
}