@page "/cars"
@using BlazorInputFile
@using CarMarket.BusinessLogic.Image.Service
@using CarMarket.Core.Car.Domain
@using CarMarket.Core.Image.Domain
@using System.IO

<h1>Cars Controller</h1>

<AuthorizeView>
    <Authorized>
        <p>Add car</p>

        <BlazorInputFile.InputFile OnChange="HandleFilesSelected"></BlazorInputFile.InputFile>
        <br>
        <BlazorInputFile.InputFile OnChange="HandleFilesSelected"></BlazorInputFile.InputFile>
        <br>
        <BlazorInputFile.InputFile OnChange="HandleFilesSelected"></BlazorInputFile.InputFile>
        <br>

        <input @bind="newCarName" placeholder="Enter car name" />
        <input @bind="newCarDescription" placeholder="Enter description" />
        <input @bind="newCarPrice" placeholder="Enter price" />
        <input @bind="newCarType" placeholder="Enter car type name" />
        <input @bind="newCarOwner" placeholder=@context.User.Identity.Name />
        
        <button @onclick="AddCarAsync">Add car</button>
    </Authorized>
</AuthorizeView>

<p>All cars</p>

@if (cars == null)
{
    <p><em>Loading cars...</em></p>
}
else
{
    <GridView Items="cars">
        <GridColumns>
            <GridColumn ColumnTitle="Image"></GridColumn>
            <GridColumn ColumnTitle="Id"></GridColumn>
            <GridColumn ColumnTitle="Title"></GridColumn>
            <GridColumn ColumnTitle="Car type"></GridColumn>
            <GridColumn ColumnTitle="Description"></GridColumn>
            <GridColumn ColumnTitle="Owner"></GridColumn>
            <GridColumn ColumnTitle="Price"></GridColumn>
            <AuthorizeView>
                <Authorized>
                    <GridColumn ColumnTitle="Actions"></GridColumn>
                </Authorized>
        </AuthorizeView>
    </GridColumns>

    <GridRow Context="car">
        <td>
            <NavLink href=@string.Format("/cars/cardetail/{0}", car.Id)>
                <img src="@ImageService.ConvertImageToDisplay(car.CarImages.FirstOrDefault())" width="200px" />
            </NavLink>
        </td>
        <td>@car.Id</td>
        <td>@car.Name</td>
        <td>@car.CarType</td>
        <td>@car.Description</td>
        <td>@car.Owner.Email</td>
        <td>@car.Price</td>
        <AuthorizeView>
            <Authorized>
                @if (car.Owner.Email.Equals(context.User.Identity.Name) || context.User.IsInRole("Admin"))
                {
                    <th>
                        <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => EditCar(car))">Edit</a> |
                        <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => DeleteCar(car.Id))">Delete</a>
                    </th>
                }
            </Authorized>
        </AuthorizeView>
    </GridRow>
</GridView>
}

@code {
    [Inject]
    public ICarService CarService { get; set; }

    private List<CarModel> cars;
    private CarModel car;
    private string newCarName;
    private string newCarDescription;
    private string newCarOwner;
    private int newCarPrice;
    private CarType newCarType;

    private List<ImageModel> newCarImages = new List<ImageModel>();

    private async Task EditCar(CarModel editedCar)
    {
        car = editedCar;

        await CarService.UpdateCarAsync(editedCar.Id, car);
    }

    private async Task DeleteCar(long deletedCarId)
    {
        await CarService.DeleteAsync(deletedCarId);

        await GetCarModelList();
    }

    async Task HandleFilesSelected(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();

        if ((file != null) && (ImageService.IsImage(file.Name)))
        {
            var ms = new MemoryStream();
            await file.Data.CopyToAsync(ms);

            newCarImages.Add(new ImageModel
            {
                ImageData = ms.ToArray(),
                ImageTitle = file.Name
            });
        }
        else throw new ArgumentException("File type " + file.Type + " not supported.");
    }

    private async Task AddCarAsync()
    {
        var newCar = new CarModel
        {
            Name = newCarName,
            Description = newCarDescription,
            CarImages = newCarImages,
            Owner = new Core.User.Domain.UserModel { Email = newCarOwner },
            Price = newCarPrice,
            CarType = newCarType
        };

        cars.Add(await CarService.CreateAsync(newCar));
        await GetCarModelList();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetCarModelList();
    }

    private async Task GetCarModelList()
    {
        cars = (await CarService.GetAllAsync()).ToList();
    }
}