@page "/cars"
@using BlazorInputFile
@using CarMarket.BusinessLogic.Image.Service
@using CarMarket.Core.Car.Domain
@using CarMarket.Core.Image.Domain
@using System.IO
@using CarMarket.Core.User.Domain
@using CarMarket.UI.Services.Car

<h1>Cars Controller</h1>

<AuthorizeView>
    <Authorized>
        <p>Add car</p>

        <BlazorInputFile.InputFile OnChange="HandleFilesSelected"></BlazorInputFile.InputFile>
        <br>
        <BlazorInputFile.InputFile OnChange="HandleFilesSelected"></BlazorInputFile.InputFile>
        <br>
        <BlazorInputFile.InputFile OnChange="HandleFilesSelected"></BlazorInputFile.InputFile>
        <br>

        <input @bind="newCarName" placeholder="Enter car name" />
        <input @bind="newCarDescription" placeholder="Enter description" />
        <input @bind="newCarPrice" placeholder="Enter price" />
        <input @bind="newCarType" placeholder="Enter car type name" />
        <input @bind="newCarOwner" placeholder=@context.User.Identity.Name />
        
        <button @onclick="AddCar">Add car</button>
    </Authorized>
</AuthorizeView>

<p>All cars</p>
    <GridView ItemType="car" ApiGetDataLink="https://localhost:10001/api/Car/GetCarsByPage">
            <GridColumns>
                <GridColumn ColumnTitle="Image"></GridColumn>
                <GridColumn ColumnTitle="Id"></GridColumn>
                <GridColumn ColumnTitle="Title"></GridColumn>
                <GridColumn ColumnTitle="Car type"></GridColumn>
                <GridColumn ColumnTitle="Description"></GridColumn>
                <GridColumn ColumnTitle="Owner"></GridColumn>
                <GridColumn ColumnTitle="Price"></GridColumn>
                <AuthorizeView>
                    <Authorized>
                        <GridColumn ColumnTitle="Actions"></GridColumn>
                    </Authorized>
                </AuthorizeView>
            </GridColumns>

        <GridRow Context="car">
            <td>
                <NavLink href=@string.Format("/cars/cardetail/{0}", car.Id)>
                    <img src="@ImageService.ConvertImageToDisplay(car.CarImages.FirstOrDefault())" width="200px" />
                </NavLink>
            </td>
            <td>@car.Id</td>
            <td>@car.Name</td>
            <td>@car.CarType</td>
            <td>@car.Description</td>
            <td>@car.Owner.Email</td>
            <td>@car.Price</td>
            <AuthorizeView>
                <Authorized>
                    @if (car.Owner.Email.Equals(context.User.Identity.Name) || context.User.IsInRole("Admin"))
                    {
                        <button class="btn btn-primary"
                            @onclick="() => EditCar(car)">
                            Edit
                        </button>

                        <button class="btn btn-danger"
                            @onclick="(() => DeleteCar(car, context))">
                            Delete
                        </button>

                        @*<th>
                            <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => EditCar(car))">Edit</a> |
                            <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => DeleteCar(car.Id))">Delete</a>
                        </th>*@
                    }
                </Authorized>
            </AuthorizeView>
        </GridRow>
    </GridView>

<AuthorizeView>
<Authorized>
@if (ShowPopup)
{
    <!-- This is the popup to create or edit a car -->
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">@TitleContext</h3>
                    <!-- Button to close the popup -->
                    <button type="button" class="close"
                            @onclick="ClosePopup">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <!-- Edit form for the current car -->
                <div class="modal-body">
                    <input class="form-control" type="text"
                                placeholder="Name"
                                @bind="editedCar.Name" />
                    <input class="form-control" type="text"
                            placeholder="Description"
                            @bind="editedCar.Description" />
                    <input class="form-control" type="number"
                            placeholder="Price"
                            @bind="editedCar.Price" />
                    @*<input class="form-control" type="email"
                            placeholder="Owner Email"
                            @bind="editedCar.Owner.Email"/>*@

                    <select class="form-control"
                            @bind="@CurrentCarType">
                        @foreach (var option in Options)
                        {
                            <option value="@option">
                                @option
                            </option>
                        }
                    </select>
                    <BlazorInputFile.InputFile OnChange="HandleFilesSelected"></BlazorInputFile.InputFile>
                    <br>
                    <BlazorInputFile.InputFile OnChange="HandleFilesSelected"></BlazorInputFile.InputFile>
                    <br>
                    <BlazorInputFile.InputFile OnChange="HandleFilesSelected"></BlazorInputFile.InputFile>
                    <br>
                    <br /><br />

                        @if (editedCar.Id == 0)
                        {
                            <button class="btn btn-primary"
                            @onclick="() => CreateCar(context)">
                                Save
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-secondary"
                            @onclick="() => UpdateCar(context)">
                                Update
                            </button>
                        }
                    <span style="color:red">@strError</span>
                </div>
            </div>
        </div>
    </div>
}
<button class="btn btn-success" @onclick="AddCar">Add Car</button>
</Authorized>
</AuthorizeView>

@code {
    [Inject]
    public IHttpCarService CarService { get; set; }

    private CarModel car;
    private string newCarName;
    private string newCarDescription;
    private string newCarOwner;
    private int newCarPrice;
    private CarType newCarType;
    private string currentUserEmail;

    private CarModel editedCar = new();
    private List<string> Options = GetCarTypes();

    private string strError = "";
    private bool ShowPopup = false;
    private string TitleContext { get; set; }
    private string CurrentCarType { get; set; }

    private async Task HandleFilesSelected(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();

        if ((file != null) && (ImageService.IsImage(file.Name)))
        {
            var ms = new MemoryStream();
            await file.Data.CopyToAsync(ms);

            editedCar.CarImages.Add(new ImageModel
            {
                ImageData = ms.ToArray(),
                ImageTitle = file.Name
            });
        }
        else strError += $"File {file.Name} not supported.\n";
    }

    private void AddCar()
    {
        editedCar = new()
        {
            Owner = new(),
            CarImages = new List<ImageModel>()
        };

        TitleContext = "Add new car";
        ShowPopup = true;
    }

    private async Task CreateCar(AuthenticationState context)
    {
        if(!SetCarType(CurrentCarType)) return;
        if (string.IsNullOrWhiteSpace(editedCar.Name)) strError += "Enter car title";
        if (editedCar.Price == 0) strError += "Enter price";

        editedCar.Owner.Email = context.User.Identity.Name;

        if (string.IsNullOrWhiteSpace(strError))
        {
            ShowPopup = false;

            await CarService.CreateAsync(editedCar, context);
        }
    }
    
    private void EditCar(CarModel updatedCar)
    {
        TitleContext = "Edit car";

        editedCar = updatedCar;

        ShowPopup = true;
    }

    private async Task UpdateCar(AuthenticationState context)
    {
        if(!SetCarType(CurrentCarType)) return;

        //editedCar.Owner.Email = ;

        if (string.IsNullOrWhiteSpace(strError))
        {
            ShowPopup = false;

            await CarService.UpdateAsync(editedCar.Id, editedCar, context);
        }
    }

    private async Task DeleteCar(CarModel car, AuthenticationState context)
    {
        ShowPopup = false;

        await CarService.DeleteAsync(car.Id, context);
    }

    private void ClosePopup()
    {
        ShowPopup = false;
    }

    private static List<string> GetCarTypes()
    {
        var names = string.Join(",", Enum.GetNames(typeof(CarType)));
        
        return names.Split(',').ToList();
    }

    private bool SetCarType(string carTypeName)
    {
        strError = string.Empty;

        if (!Enum.TryParse(typeof(CarType), carTypeName, out object result))
        {
            strError += "Select car type";
            return false;
        }

        editedCar.CarType = (CarType)result;

        return true;
    }

    private void SetOwnerEmail(string email)
    {
        
    }
}