@page "/cars"
@using BlazorInputFile
@using CarMarket.BusinessLogic.Image.Service
@using CarMarket.Core.Car.Domain
@using CarMarket.Core.Image.Domain
@using System.IO

<h1>Cars Controller</h1>

<AuthorizeView>
    <Authorized>
        <p>Add car</p>

        <BlazorInputFile.InputFile OnChange="HandleFilesSelected"></BlazorInputFile.InputFile>
        <br>
        <BlazorInputFile.InputFile OnChange="HandleFilesSelected"></BlazorInputFile.InputFile>
        <br>
        <BlazorInputFile.InputFile OnChange="HandleFilesSelected"></BlazorInputFile.InputFile>
        <br>

        <input @bind="newCarName" placeholder="Enter car name" />
        <input @bind="newCarDescription" placeholder="Enter description" />
        <input @bind="newCarPrice" placeholder="Enter price" />
        <input @bind="newCarType" placeholder="Enter car type name" />
        <input @bind="newCarOwner" placeholder=@context.User.Identity.Name />
        
        <button @onclick="AddCar">Add car</button>
    </Authorized>
</AuthorizeView>

<p>All cars</p>
    <GridView ItemType="car" ApiGetDataLink="https://localhost:10001/api/Car/GetCarsByPage">
            <GridColumns>
                <GridColumn ColumnTitle="Image"></GridColumn>
                <GridColumn ColumnTitle="Id"></GridColumn>
                <GridColumn ColumnTitle="Title"></GridColumn>
                <GridColumn ColumnTitle="Car type"></GridColumn>
                <GridColumn ColumnTitle="Description"></GridColumn>
                <GridColumn ColumnTitle="Owner"></GridColumn>
                <GridColumn ColumnTitle="Price"></GridColumn>
                <AuthorizeView>
                    <Authorized>
                        <GridColumn ColumnTitle="Actions"></GridColumn>
                    </Authorized>
                </AuthorizeView>
            </GridColumns>

        <GridRow Context="car">
            <td>
                <NavLink href=@string.Format("/cars/cardetail/{0}", car.Id)>
                    <img src="@ImageService.ConvertImageToDisplay(car.CarImages.FirstOrDefault())" width="200px" />
                </NavLink>
            </td>
            <td>@car.Id</td>
            <td>@car.Name</td>
            <td>@car.CarType</td>
            <td>@car.Description</td>
            <td>@car.Owner.Email</td>
            <td>@car.Price</td>
            <AuthorizeView>
                <Authorized>
                    @if (car.Owner.Email.Equals(context.User.Identity.Name) || context.User.IsInRole("Admin"))
                    {
                        <button class="btn btn-primary"
                            @onclick="(() => EditCar(car))">
                            Edit
                        </button>

                        <button class="btn btn-danger"
                            @onclick="(() => DeleteCar())">
                            Delete
                        </button>

                        @*<th>
                            <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => EditCar(car))">Edit</a> |
                            <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => DeleteCar(car.Id))">Delete</a>
                        </th>*@
                    }
                </Authorized>
            </AuthorizeView>
        </GridRow>
    </GridView>

    @if (ShowPopup)
{
    <!-- This is the popup to create or edit a car -->
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">@TitleContext</h3>
                    <!-- Button to close the popup -->
                    <button type="button" class="close"
                            @onclick="ClosePopup">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <!-- Edit form for the current car -->
                <div class="modal-body">
                    <!-- Only show Id if not a new car -->
                    @if (objCar.Id != 0)
                    {
                        <p>@objCar.Id</p>
                    }
                    
                    <input class="form-control" type="text"
                                placeholder="Name"
                                @bind="objCar.Name" />
                    <input class="form-control" type="text"
                            placeholder="Description"
                            @bind="objCar.Description" />
                    <input class="form-control" type="number"
                            placeholder="Price"
                            @bind="objCar.Price" />
                    <input class="form-control" type="email"
                            placeholder="Owner Email"
                            @bind="objCar.Owner.Email" />
                    <select class="form-control"
                            @bind="@CurrentCarType">
                        @foreach (var option in Options)
                        {
                            <option value="@option">
                                @option
                            </option>
                        }
                    </select>
                    <br /><br />
                    <!-- Button to save the user -->
                    <button class="btn btn-primary"
                            @onclick="SaveCar">
                        Save
                    </button>
                    <!-- Only show delete button if not a new record -->
                    @if (objCar.Id != default)
                    {
                        <!-- Button to delete the forecast -->
                        <button class="btn btn-danger"
                                @onclick="DeleteCar">
                            Delete
                        </button>
                    }
                    <br />
                    <span style="color:red">@strError</span>
                </div>
            </div>
        </div>
    </div>
}
<button class="btn btn-success" @onclick="AddCarAsync">Add Car</button>

@code {
    [Inject]
    public IHttpCarService CarService { get; set; }

    private CarModel car;
    private string newCarName;
    private string newCarDescription;
    private string newCarOwner;
    private int newCarPrice;
    private CarType newCarType;

    private List<ImageModel> newCarImages = new List<ImageModel>();

        // Property used to add or edit the currently selected user
    CarModel objCar = new()
    {
        Name = "test"
    };
    // Options to display in the roles dropdown when editing a user
    List<string> Options = new() { "SportCar", "Hatchback" }; // car types
    // To hold any possible errors
    string strError = "";
    // To enable showing the Popup
    bool ShowPopup = false;
    string TitleContext { get; set; }
    string CurrentCarType { get; set; }

    @*private async Task EditCar(CarModel editedCar)
    {
        car = editedCar;

        await CarService.UpdateCarAsync(editedCar.Id, car);
    }*@

    private async Task DeleteCar(long deletedCarId)
    {
        await CarService.DeleteAsync(deletedCarId);
    }

    async Task HandleFilesSelected(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();

        if ((file != null) && (ImageService.IsImage(file.Name)))
        {
            var ms = new MemoryStream();
            await file.Data.CopyToAsync(ms);

            newCarImages.Add(new ImageModel
            {
                ImageData = ms.ToArray(),
                ImageTitle = file.Name
            });
        }
        else throw new ArgumentException("File type " + file.Type + " not supported.");
    }

    private async Task AddCarAsync()
    {
        TitleContext = "Add new car";
        ShowPopup = true;

        objCar = new CarModel()
        {
            Name = "qq",
            Id = 5,
            Owner = new Core.User.Domain.UserModel() { Id = "qwe" },
            Description = "qwe",
        };

        @*var newCar = new CarModel
        {
            Name = newCarName,
            Description = newCarDescription,
            CarImages = newCarImages,
            Owner = new Core.User.Domain.UserModel { Email = newCarOwner },
            Price = newCarPrice,
            CarType = newCarType
        };*@

        //await CarService.CreateAsync(newCar);
    }

    private async Task AddCar()
    {
        var newCar = new CarModel
        {
            Name = newCarName,
            Description = newCarDescription,
            CarImages = newCarImages,
            Owner = new Core.User.Domain.UserModel { Email = newCarOwner },
            Price = newCarPrice,
            CarType = newCarType
        };

        await CarService.CreateAsync(newCar);
    }

    async Task SaveCar()
    {
        ShowPopup = false;
    }
    
    async Task EditCar(CarModel editedCar)
    {
        TitleContext = "Edit car";

        objCar = new CarModel()
        {
            Name = "qq",
            Id = 5,
            Owner = new Core.User.Domain.UserModel() { Id = "qwe" },
            Description = "qwe",
        };

        ShowPopup = true;


        await CarService.UpdateCarAsync(editedCar.Id, car);
    }
    async Task DeleteCar()
    {
        // Close the Popup
        ShowPopup = false;
        // Get the user to delete
    }
    void ClosePopup()
    {
        ShowPopup = false;
    }
}