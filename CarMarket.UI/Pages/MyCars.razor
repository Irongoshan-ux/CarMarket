@page "/myCars"
@using CarMarket.BusinessLogic.Image.Service
@using CarMarket.Core.Car.Domain
@using CarMarket.Core.Image.Domain
@using CarMarket.UI.Services.Car
@using CarMarket.UI.Services.HttpInterceptor
@using Microsoft.AspNetCore.Authorization
@using System.IO
@inject IToastService toastService

@attribute [Authorize(Roles = "Admin,User")]

<h1>My cars</h1>

@if (cars == null)
{
    <p><em>Loading cars...</em></p>
}
else
{
<table class="table">
        <thead>
            <tr>
                <th>Image</th>
                <th>Title</th>
                <th>Car type</th>
                <th>Description</th>
                <th>Price</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var car in cars)
            {
                <tr>
                    <td>
                    <NavLink href=@string.Format("/cars/cardetail/{0}", car?.Id)>
                        @if (car.CarImages.FirstOrDefault() is not null)
                        {
                            <img src="@ImageService.ConvertImageToDisplay(car.CarImages.FirstOrDefault())" height ="150px" />
                        }
                        else
                        {
                            <img src="https://consulsat-sd.com/wp-content/themes/consultix/images/no-image-found-360x250.png" height="150px" />
                        }
                        </NavLink>
                    </td>
                    <td>@car?.Model.Name</td>
                    <td>@car?.CarType</td>
                    <td>@car?.Description</td>
                    <td>$@car?.Price</td>
                    <button class="btn btn-primary"
                        @onclick="() => EditCar(car)">
                         <span
                            class="glyphicon glyphicon-pencil"></span>
                            &nbsp; Edit
                    </button>
                    
                    <button class="btn btn-danger"
                        @onclick="(() => DeleteCar(car))">
                        <span
                            class="glyphicon glyphicon-trash"></span>
                            &nbsp; Remove
                    </button>
                </tr>
            }
        </tbody>
    </table>

<AuthorizeView>
    @if (ShowPopup)
    {
        <div style="display:none;">
            @SetUpUserEmail(context)
        </div>
    <!-- This is the popup to create or edit a car -->
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">@TitleContext</h3>
                    <!-- Button to close the popup -->
                    <button type="button" class="close"
                            @onclick="ClosePopup">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <!-- Edit form for the current car -->
                <div class="modal-body">
                    <MudTextField @bind-Value="editedCar.Model.Name" Label="Car model name" Variant="Variant.Outlined" AutoFocus=true Validation="@(new Func<string,string>(ValidateModelName))"></MudTextField>

                        <MudTextField Lines=5 @bind-Value="@editedCar.Description" Label="Description" Variant="Variant.Outlined"  ></MudTextField>

                            <MudTextField @bind-Value="editedCar.Price" Label="Price" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney" AdornmentColor="Color.Info" Error=@priceError ErrorText="@priceErrorText" />

                            <MudSelect Variant="Variant.Outlined"  T="string" @bind-Value="CurrentCarType" Label="Car type" AnchorOrigin="Origin.BottomCenter" Validation="@(new Func<string,string>(ValidateCarType))">
                                @foreach (var option in Options)
                                {
                                    <MudSelectItem Value="@option" />
                                }
                            </MudSelect>

                            <br>

                        <Microsoft.AspNetCore.Components.Forms.InputFile id="fileInput" OnChange="HandleFilesSelected" hidden multiple accept=".jpg, .jpeg, .png"/>

                        <MudFab HtmlTag="label"
                                Color="Color.Info"
                                Icon="@Icons.Filled.Image"
                                Label="Load picture"
                                for="fileInput" />

                        @if (editedCar.CarImages.FirstOrDefault() is not null)
                            {
                                <MudText Typo="@Typo.h6">@editedCar.CarImages.Count() File@(editedCar.CarImages.Count() == 1 ? "" : "s"):</MudText>
                                <MudList>
                                    @foreach (var file in editedCar.CarImages)
                                    {
                                        <MudListItem Icon="@Icons.Filled.AttachFile" @key="@file">
                                            @if (file.ImageTitle.Length > 30)
                                            {
                                                @(file.ImageTitle.Remove(30) + "...") 
                                            }
                                            else @file.ImageTitle 
                                            &nbsp;
                                            <code>@file.ImageData.Length bytes</code>
                                        </MudListItem>
                                    }
                                </MudList>
                            }

                            <br>
                            <br>

                            <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" @onclick="() => UpdateCar()">Update</MudButton>
                </div>
            </div>
        </div>
    </div>
}
</AuthorizeView>
}
@code {
    [Inject]
    public IHttpCarService CarService { get; set; }

    [Inject]
    public HttpInterceptorService Interceptor { get; set; }
    public void Dispose() => Interceptor.DisposeEvent();

    private List<CarModel> cars { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            cars = (await CarService.GetAllUserCarsByTokenAsync()).ToList();
        }
        catch
        {
            cars = null;
        }
    }

    private CarModel car;
    private CarModel editedCar = new();
    private static List<string> Options = GetCarTypesSelection();

    private string strError = "";
    private bool ShowPopup = false;
    private string TitleContext { get; set; }
    private string CurrentCarType { get; set; } = Options.FirstOrDefault();
    private string CurrentUserEmail { get; set; }

    private string modelErrorText = "Enter car model";

    private bool priceError;
    private string priceErrorText = "Price should be minimum $500";
    private string carTypeError = "Select car type";

    private object SetUpUserEmail(AuthenticationState context)
    {
        CurrentUserEmail = context.User.Identity.Name;

        return CurrentUserEmail;
    }

    private string ValidateModelName(string modelName)
    {
        if (string.IsNullOrWhiteSpace(modelName))
            return modelErrorText;
        else return null;
    }

    private string ValidateCarType(string carTypeName)
    {
        if (!SetCarType(carTypeName))
            return carTypeError;

        else return null;
    }

    private async Task HandleFilesSelected(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            if ((file != null) && (ImageService.IsImage(file.Name)))
            {
                var ms = new byte[file.Size];

                await file.OpenReadStream().ReadAsync(ms);

                editedCar.CarImages.Add(new ImageModel
                    {
                        ImageData = ms,
                        ImageTitle = file.Name
                    });

                toastService.ShowInfo("Successfull uploading");
            }

            else
            {
                strError += $"\nFile {file.Name} is not supported.\n";
                toastService.ShowError(strError);
            }
        }
    }

    private void AddCar()
    {
        editedCar = new()
        {
            Owner = new(),
            CarImages = new List<ImageModel>()
        };

        TitleContext = "Add new car";
        ShowPopup = true;
    }

    private async Task CreateCar(AuthenticationState context)
    {
        strError = string.Empty;

        if(!SetCarType(CurrentCarType)) return;
        if (string.IsNullOrWhiteSpace(editedCar.Model.Name)) strError += "\nEnter car title";
        if (editedCar.Price == 0) strError += "\nEnter price";

        editedCar.Owner = new()
        {
            Email = CurrentUserEmail
        };

        if (string.IsNullOrWhiteSpace(strError))
        {
            ShowPopup = false;

            var createdCar = await CarService.CreateAsync(editedCar);

            if (createdCar != null)
            {
                toastService.ShowSuccess($"{createdCar.Model.Name} was successfully created!");
            }
            else toastService.ShowError($"Error with creating a new car");
        }
    }
    
    private void EditCar(CarModel updatedCar)
    {
        TitleContext = "Edit car";

        editedCar = updatedCar;

        CurrentCarType = editedCar.CarType.ToString();

        ShowPopup = true;
    }

    private async Task UpdateCar()
    {
        strError = string.Empty;

        if (!SetCarType(CurrentCarType)) return;

        editedCar.Owner = new()
        {
            Email = CurrentUserEmail
        };

        if (string.IsNullOrWhiteSpace(strError))
        {
            ShowPopup = false;

            if (await CarService.UpdateAsync(editedCar.Id, editedCar))
            {
                toastService.ShowSuccess($"{editedCar.Model.Name} was successfully updated!");
            }
            else toastService.ShowError($"Error with updating {editedCar.Model.Name}");
        }
    }

    private async Task DeleteCar(CarModel car)
    {
        ShowPopup = false;

        if (await CarService.DeleteAsync(car.Id))
        {
            toastService.ShowSuccess($"{car.Model.Name} was successfully deleted!");
        }
        else toastService.ShowError($"Error with deleting {car.Model.Name}");
    }

    private void ClosePopup()
    {
        ShowPopup = false;
    }

    private static List<string> GetCarTypesSelection()
    {
        var names = string.Join(",", Enum.GetNames(typeof(CarType)));

        var carTypes = new List<string>()
        {
            "Select car type",
        };

        carTypes.AddRange(names.Split(',').ToList());

        return carTypes;
    }

    private bool SetCarType(string carTypeName)
    {
        if (!Enum.TryParse(typeof(CarType), carTypeName, out object result))
        {
            strError += "\nSelect car type";
            return false;
        }

        editedCar.CarType = (CarType)result;

        return true;
    }
}
