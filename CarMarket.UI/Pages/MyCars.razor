@page "/myCars"
@using CarMarket.BusinessLogic.Image.Service
@using CarMarket.Core.Car.Domain
@using CarMarket.Core.Image.Domain
@using CarMarket.UI.Services.Car
@using CarMarket.UI.Services.Image
@using Microsoft.AspNetCore.Authorization
@using System.IO

@attribute [Authorize(Roles = "Admin,User")]

<p>My cars</p>

@if (cars == null)
{
    <p><em>Loading cars...</em></p>
}
else
{
<table class="table">
        <thead>
            <tr>
                <th>Image</th>
                <th>Title</th>
                <th>Car type</th>
                <th>Description</th>
                <th>Price</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var car in cars)
            {
                <tr>
                    <td>
                    <NavLink href=@string.Format("/cars/cardetail/{0}", car.Id)>
                        @if (car.CarImages.Count > 0)
                        {
                            <img src="@ImageService.ConvertImageToDisplay(car.CarImages.FirstOrDefault())" height ="150px" />
                        }
                        else
                        {
                            <img src="https://thumbs.dreamstime.com/z/no-image-available-icon-flat-vector-no-image-available-icon-flat-vector-illustration-132482953.jpg" height="150px" />
                        }
                        </NavLink>
                    </td>
                    <td>@car.Name</td>
                    <td>@car.CarType</td>
                    <td>@car.Description</td>
                    <td>@car.Price</td>
                    <button class="btn btn-primary"
                        @onclick="() => EditCar(car)">
                        Edit
                    </button>
                    
                    <button class="btn btn-danger"
                        @onclick="(() => DeleteCar(car))">
                        Delete
                    </button>
                </tr>
            }
        </tbody>
    </table>

<AuthorizeView>
    <CarPopUp CarService="CarService" TitleContext="@TitleContext" context="context"
            ShowPopup="ShowPopup" EditedCar="editedCar" CurrentCarType="@CurrentCarType"></CarPopUp>
</AuthorizeView>
}
@code {
    [Inject]
    public IHttpCarService CarService { get; set; }

    private List<CarModel> cars { get; set; }

    protected override async Task OnInitializedAsync()
    {
        cars = (await CarService.GetAllUserCarsByTokenAsync()).ToList();
    }

    private CarModel car;
    private CarModel editedCar = new();
    private static List<string> Options = GetCarTypesSelection();

    private string strError = "";
    private bool ShowPopup = false;
    private string TitleContext { get; set; }
    private string CurrentCarType { get; set; } = Options.FirstOrDefault();
    private string CurrentUserEmail { get; set; }

    private void AddCar()
    {
        editedCar = new()
        {
            Owner = new(),
            CarImages = new List<ImageModel>()
        };

        TitleContext = "Add new car";
        ShowPopup = true;
    }

    private void EditCar(CarModel updatedCar)
    {
        TitleContext = "Edit car";

        editedCar = updatedCar;

        CurrentCarType = editedCar.CarType.ToString();

        ShowPopup = true;
    }

    private async Task DeleteCar(CarModel car)
    {
        await CarService.DeleteAsync(car.Id);
    }

    private static List<string> GetCarTypesSelection()
    {
        var names = string.Join(",", Enum.GetNames(typeof(CarType)));

        var carTypes = new List<string>()
        {
            "Select car type",
        };

        carTypes.AddRange(names.Split(',').ToList());

        return carTypes;
    }
}
