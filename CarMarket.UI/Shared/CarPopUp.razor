@using CarMarket.Core.Car.Domain
@using CarMarket.UI.Data
@using CarMarket.UI.Services.Car
@using CarMarket.UI.Services.Image

@if (ShowPopup)
{
        @SetUpUserEmail(context)
        <!-- This is the popup to create or edit a car -->
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">@TitleContext</h3>
                        <!-- Button to close the popup -->
                    <button type="button" class="close"
                            @onclick="ClosePopup">
                            <span aria-hidden="true">X</span>
                        </button>
                    </div>
                    <!-- Edit form for the current car -->
                <div class="modal-body">
                        <input class="form-control" type="text"
                                placeholder="Name"
                                @bind="EditedCar.Name" />
                        <input class="form-control" type="text"
                            placeholder="Description"
                            @bind="EditedCar.Description" />
                        <input class="form-control" type="number"
                            placeholder="Price"
                            @bind="EditedCar.Price" />
                        <input class="form-control" type="email"
                            placeholder="Owner Email"
                            @bind="@CurrentUserEmail"/>

                        <select class="form-control"
                            @bind="@CurrentCarType">
                            @foreach (var option in Options)
                            {
                                <option value="@option">
                                    @option
                                </option>
                            }
                        </select>
                        <BlazorInputFile.InputFile OnChange="HandleFilesSelected"></BlazorInputFile.InputFile>
                        <br>
                        <BlazorInputFile.InputFile OnChange="HandleFilesSelected"></BlazorInputFile.InputFile>
                        <br>
                        <BlazorInputFile.InputFile OnChange="HandleFilesSelected"></BlazorInputFile.InputFile>
                        <br>
                        <br /><br />

                        @if (EditedCar.Id == 0)
                        {
                            <button class="btn btn-primary"
                            @onclick="() => CreateCar(context)">
                                Save
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-secondary"
                            @onclick="() => UpdateCar()">
                                Update
                            </button>
                        }
                        <span style="color:red">@strError</span>
                    </div>
                </div>
            </div>
        </div>
    }

@code {
    [Parameter]
    public IHttpCarService CarService { get; set; }

    [Parameter]
    public AuthenticationState context { get; set; }

    [Parameter]
    public bool ShowPopup { get; set; }

    [Parameter]
    public string TitleContext { get; set; }

    [Parameter]
    public CarModel EditedCar { get; set; }

    [Parameter]
    public string CurrentCarType { get; set; }

    [Parameter]
    public bool[] DataUpdated{ get; set; }

    private static List<string> Options = GetCarTypesSelection();
    private string strError = "";
    private string CurrentUserEmail { get; set; }

    private object SetUpUserEmail(AuthenticationState context)
    {
        CurrentUserEmail = context.User.Identity.Name;

        return CurrentUserEmail;
    }

    private async Task HandleFilesSelected(IFileListEntry[] files)
    {
        try
        {
            EditedCar.CarImages.Add(await ImageUploader.UploadImage(files));
        }
        catch(Exception e)
        {
            strError += $"\n{e.Message}\n";
        }
    }

    private async Task CreateCar(AuthenticationState context)
    {
        strError = string.Empty;

        if(!SetCarType(CurrentCarType)) return;
        if (string.IsNullOrWhiteSpace(EditedCar.Name)) strError += "\nEnter car title";
        if (EditedCar.Price == 0) strError += "\nEnter price";

        EditedCar.Owner = new()
        {
            Email = CurrentUserEmail
        };

        if (string.IsNullOrWhiteSpace(strError))
        {
            ShowPopup = false;

            await CarService.CreateAsync(EditedCar);

            DataUpdated[0] = true;
        }
    }

    private async Task UpdateCar()
    {
        strError = string.Empty;

        if(!SetCarType(CurrentCarType)) return;

        EditedCar.Owner = new()
        {
            Email = CurrentUserEmail
        };

        if (string.IsNullOrWhiteSpace(strError))
        {
            ShowPopup = false;

            await CarService.UpdateAsync(EditedCar.Id, EditedCar);

            DataUpdated[0] = true;
        }
    }

    private static List<string> GetCarTypesSelection()
    {
        var names = string.Join(",", Enum.GetNames(typeof(CarType)));

        var carTypes = new List<string>()
        {
            "Select car type",
        };

        carTypes.AddRange(names.Split(',').ToList());

        return carTypes;
    }

    private bool SetCarType(string carTypeName)
    {
        if (!TryParseCarType(carTypeName, out object result))
        {
            strError += "\nSelect car type";
            return false;
        }

        EditedCar.CarType = (CarType)result;

        return true;
    }

    private bool TryParseCarType(string carTypeName, out object carType) => Enum.TryParse(typeof(CarType), carTypeName, out carType);

    private void ClosePopup() => ShowPopup = false;
}